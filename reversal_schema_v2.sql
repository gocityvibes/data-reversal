
-- Enhanced Reversal Data Collection Database Schema (v2.0.1)
-- Multi-timeframe (1m, 5m) with Archive System
-- PostgreSQL (Render-ready)

-- ============================================================
-- Drop existing objects (safe re-run)
-- ============================================================

DROP TABLE IF EXISTS system_stats CASCADE;
DROP TABLE IF EXISTS job_runs CASCADE;
DROP TABLE IF EXISTS processing_watermarks CASCADE;
DROP TABLE IF EXISTS reversals_archive CASCADE;
DROP TABLE IF EXISTS reversals CASCADE;

DROP FUNCTION IF EXISTS update_updated_at_column() CASCADE;
DROP FUNCTION IF EXISTS archive_labeled_reversals(INTERVAL) CASCADE;
DROP FUNCTION IF EXISTS cleanup_old_reversals(INTERVAL) CASCADE;
DROP FUNCTION IF EXISTS update_system_stats() CASCADE;

-- ============================================================
-- Main reversals table (live data with rolling retention)
-- ============================================================
CREATE TABLE reversals (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    symbol VARCHAR(20) NOT NULL,
    timeframe VARCHAR(10) NOT NULL CHECK (timeframe IN ('1m','5m')),
    "timestamp" TIMESTAMPTZ NOT NULL,
    session VARCHAR(20) DEFAULT 'RTH' CHECK (session IN ('RTH','ETH')),

    -- Trend/Structure
    swing_trend_incoming VARCHAR(10) NOT NULL CHECK (swing_trend_incoming IN ('uptrend','downtrend')),
    broke_last_higher_low BOOLEAN DEFAULT FALSE,
    broke_last_lower_high BOOLEAN DEFAULT FALSE,
    bars_since_peak_trough INTEGER CHECK (bars_since_peak_trough IS NULL OR bars_since_peak_trough >= 0),

    -- Exhaustion Metrics
    rsi NUMERIC(5,2) NOT NULL,
    rsi_lookback_max NUMERIC(5,2),
    rsi_lookback_min NUMERIC(5,2),
    move_vs_atr NUMERIC(6,3) NOT NULL CHECK (move_vs_atr >= 0),
    price_to_vwap_pct NUMERIC(6,3),
    price_to_ema21_pct NUMERIC(6,3),
    rel_vol_20 NUMERIC(6,2),
    vol_climax_flag BOOLEAN DEFAULT FALSE,
    candle_pattern VARCHAR(40) DEFAULT 'none',

    -- Confirmation
    ema8_cross_ema21 VARCHAR(10) DEFAULT 'none' CHECK (ema8_cross_ema21 IN ('up','down','none')),
    rsi_cross_50 VARCHAR(10) DEFAULT 'none' CHECK (rsi_cross_50 IN ('up','down','none')),
    vwap_retest_result VARCHAR(10) DEFAULT 'none' CHECK (vwap_retest_result IN ('accept','reject','none')),

    -- Follow-through
    follow_through_atr NUMERIC(6,3) CHECK (follow_through_atr IS NULL OR follow_through_atr >= 0),
    follow_through_bars_10 INTEGER CHECK (follow_through_bars_10 IS NULL OR follow_through_bars_10 >= 0),

    -- Context
    tf5_bias VARCHAR(10) DEFAULT 'neutral' CHECK (tf5_bias IN ('bull','bear','neutral')),
    daily_bias VARCHAR(10) DEFAULT 'neutral' CHECK (daily_bias IN ('bull','bear','neutral')),

    -- Outcome & Labeling (for gold/hard negatives)
    outcome VARCHAR(20) DEFAULT 'pending' CHECK (outcome IN ('pending','gold','hard_negative','neutral')),
    quality_score INTEGER CHECK (quality_score IS NULL OR (quality_score BETWEEN 0 AND 100)),
    mfe_atr NUMERIC(6,3) CHECK (mfe_atr IS NULL OR mfe_atr >= 0),
    mae_atr NUMERIC(6,3) CHECK (mae_atr IS NULL OR mae_atr >= 0),
    rr_achieved NUMERIC(6,3),
    time_to_target_bars INTEGER CHECK (time_to_target_bars IS NULL OR time_to_target_bars >= 0),
    time_to_stop_bars INTEGER CHECK (time_to_stop_bars IS NULL OR time_to_stop_bars >= 0),
    structure_invalidated BOOLEAN,

    -- Points / Ranking (added to satisfy point-based indexes)
    base_points INTEGER DEFAULT 0,
    total_points INTEGER DEFAULT 0,
    point_tier VARCHAR(10) DEFAULT 'C', -- e.g., S/A/B/C
    CHECK (base_points >= 0),
    CHECK (total_points >= 0),

    -- Meta
    source VARCHAR(20) DEFAULT 'daily_refresh' CHECK (source IN ('backfill','daily_refresh')),
    run_id VARCHAR(50),
    schema_version VARCHAR(10) DEFAULT '2.0',
    data_quality VARCHAR(20) DEFAULT 'good' CHECK (data_quality IN ('good','suspect','poor')),

    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),

    -- One bar per symbol/timeframe/timestamp
    UNIQUE(symbol, timeframe, "timestamp")
);

-- ============================================================
-- Archive table for permanent storage of gold/hard negative patterns
-- ============================================================
CREATE TABLE reversals_archive (
    LIKE reversals INCLUDING ALL,
    archived_at TIMESTAMPTZ DEFAULT NOW()
);

-- Remove the identity constraint from archive (we'll copy IDs)
ALTER TABLE reversals_archive ALTER COLUMN id DROP IDENTITY;

-- Add conflict target used by archive function
ALTER TABLE reversals_archive
    ADD CONSTRAINT uq_reversals_archive_bar UNIQUE (symbol, timeframe, "timestamp");

-- ============================================================
-- Processing watermarks table (enhanced for multiple symbols/timeframes)
-- ============================================================
CREATE TABLE processing_watermarks (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    symbol VARCHAR(20) NOT NULL,
    timeframe VARCHAR(10) NOT NULL,
    last_processed_ts TIMESTAMPTZ NOT NULL,
    last_successful_run TIMESTAMPTZ DEFAULT NOW(),
    consecutive_failures INTEGER DEFAULT 0 CHECK (consecutive_failures >= 0),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(symbol, timeframe)
);

-- ============================================================
-- Job runs table for monitoring (enhanced)
-- ============================================================
CREATE TABLE job_runs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    run_id VARCHAR(50) UNIQUE NOT NULL,
    job_type VARCHAR(20) NOT NULL CHECK (job_type IN ('backfill','daily_refresh','labeling','housekeeping')),
    symbol VARCHAR(20),
    timeframe VARCHAR(10),
    start_date DATE,
    end_date DATE,
    status VARCHAR(20) DEFAULT 'running' CHECK (status IN ('running','completed','failed','partial')),
    bars_processed INTEGER DEFAULT 0 CHECK (bars_processed >= 0),
    reversals_detected INTEGER DEFAULT 0 CHECK (reversals_detected >= 0),
    reversals_labeled INTEGER DEFAULT 0 CHECK (reversals_labeled >= 0),
    reversals_archived INTEGER DEFAULT 0 CHECK (reversals_archived >= 0),
    reversals_deleted INTEGER DEFAULT 0 CHECK (reversals_deleted >= 0),
    error_message TEXT,
    started_at TIMESTAMPTZ DEFAULT NOW(),
    completed_at TIMESTAMPTZ,
    duration_seconds INTEGER CHECK (duration_seconds IS NULL OR duration_seconds >= 0)
);

-- ============================================================
-- System stats table for monitoring
-- ============================================================
CREATE TABLE system_stats (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    stat_date DATE DEFAULT CURRENT_DATE,
    symbol VARCHAR(20) NOT NULL,
    timeframe VARCHAR(10) NOT NULL,
    total_reversals INTEGER DEFAULT 0 CHECK (total_reversals >= 0),
    gold_count INTEGER DEFAULT 0 CHECK (gold_count >= 0),
    hard_negative_count INTEGER DEFAULT 0 CHECK (hard_negative_count >= 0),
    neutral_count INTEGER DEFAULT 0 CHECK (neutral_count >= 0),
    pending_count INTEGER DEFAULT 0 CHECK (pending_count >= 0),
    avg_quality_score NUMERIC(5,2),
    avg_gold_score NUMERIC(5,2),
    archive_total INTEGER DEFAULT 0 CHECK (archive_total >= 0),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(stat_date, symbol, timeframe)
);

-- ============================================================
-- Indexes
-- ============================================================

-- Performance indexes for live table
CREATE INDEX idx_reversals_primary ON reversals (symbol, timeframe, "timestamp" DESC);

-- Point-based indexes for trading decisions
CREATE INDEX idx_reversals_points_tier ON reversals (total_points DESC, point_tier, "timestamp" DESC);
CREATE INDEX idx_reversals_base_points ON reversals (base_points DESC, timeframe, symbol);

-- Multi-timeframe similarity index for GPT neighbor searches
CREATE INDEX idx_reversals_gpt_similarity 
  ON reversals (symbol, timeframe, swing_trend_incoming, total_points DESC, rsi, move_vs_atr, price_to_vwap_pct)
  WHERE "timestamp" > NOW() - INTERVAL '120 days';

-- Structure and confirmation indexes
CREATE INDEX idx_reversals_structure
  ON reversals (swing_trend_incoming, broke_last_higher_low, broke_last_lower_high, "timestamp" DESC);

CREATE INDEX idx_reversals_confirmation
  ON reversals (ema8_cross_ema21, rsi_cross_50, timeframe);

-- Outcome-based indexes with points
CREATE INDEX idx_reversals_outcome
  ON reversals (outcome, total_points DESC, quality_score DESC, timeframe) 
  WHERE outcome <> 'pending';

-- Point tier analysis index
CREATE INDEX idx_reversals_point_analysis
  ON reversals (point_tier, outcome, total_points DESC)
  WHERE outcome IN ('gold', 'hard_negative', 'neutral');

CREATE INDEX idx_reversals_pending
  ON reversals ("timestamp", timeframe) 
  WHERE outcome = 'pending';

-- Rolling window index with extended retention
CREATE INDEX idx_reversals_rolling_window
  ON reversals ("timestamp", symbol, timeframe) 
  WHERE "timestamp" > NOW() - INTERVAL '150 days';

-- Archive table indexes
CREATE INDEX idx_archive_primary ON reversals_archive (symbol, timeframe, "timestamp" DESC);
CREATE INDEX idx_archive_outcome ON reversals_archive (outcome, quality_score DESC, archived_at DESC);
CREATE INDEX idx_archive_gpt_search ON reversals_archive (symbol, timeframe, swing_trend_incoming, outcome);

-- Job runs indexes
CREATE INDEX idx_job_runs_status_started_at ON job_runs (status, started_at);
CREATE INDEX idx_job_runs_type_started_at ON job_runs (job_type, started_at);
CREATE INDEX idx_job_runs_symbol_timeframe ON job_runs (symbol, timeframe, completed_at DESC);

-- System stats indexes
CREATE INDEX idx_system_stats_date ON system_stats (stat_date DESC, symbol, timeframe);

-- ============================================================
-- Triggers & Functions
-- ============================================================

-- Update trigger for updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Apply update trigger to relevant tables
DROP TRIGGER IF EXISTS update_reversals_updated_at ON reversals;
CREATE TRIGGER update_reversals_updated_at
BEFORE UPDATE ON reversals
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

DROP TRIGGER IF EXISTS update_watermarks_updated_at ON processing_watermarks;
CREATE TRIGGER update_watermarks_updated_at
BEFORE UPDATE ON processing_watermarks
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Archive function for moving gold/hard negative patterns to permanent storage
CREATE OR REPLACE FUNCTION archive_labeled_reversals(retention_period INTERVAL DEFAULT '120 days')
RETURNS INTEGER AS $$
DECLARE
    archived_count INTEGER := 0;
    cutoff_date TIMESTAMPTZ;
BEGIN
    cutoff_date := NOW() - retention_period;
    
    -- Insert gold and hard negative patterns into archive
    INSERT INTO reversals_archive (
        id, symbol, timeframe, "timestamp", session,
        swing_trend_incoming, broke_last_higher_low, broke_last_lower_high, bars_since_peak_trough,
        rsi, rsi_lookback_max, rsi_lookback_min, move_vs_atr, price_to_vwap_pct, price_to_ema21_pct,
        rel_vol_20, vol_climax_flag, candle_pattern,
        ema8_cross_ema21, rsi_cross_50, vwap_retest_result,
        follow_through_atr, follow_through_bars_10,
        tf5_bias, daily_bias,
        outcome, quality_score, mfe_atr, mae_atr, rr_achieved,
        time_to_target_bars, time_to_stop_bars, structure_invalidated,
        base_points, total_points, point_tier,
        source, run_id, schema_version, data_quality,
        created_at, updated_at
    )
    SELECT 
        id, symbol, timeframe, "timestamp", session,
        swing_trend_incoming, broke_last_higher_low, broke_last_lower_high, bars_since_peak_trough,
        rsi, rsi_lookback_max, rsi_lookback_min, move_vs_atr, price_to_vwap_pct, price_to_ema21_pct,
        rel_vol_20, vol_climax_flag, candle_pattern,
        ema8_cross_ema21, rsi_cross_50, vwap_retest_result,
        follow_through_atr, follow_through_bars_10,
        tf5_bias, daily_bias,
        outcome, quality_score, mfe_atr, mae_atr, rr_achieved,
        time_to_target_bars, time_to_stop_bars, structure_invalidated,
        base_points, total_points, point_tier,
        source, run_id, schema_version, data_quality,
        created_at, updated_at
    FROM reversals
    WHERE outcome IN ('gold', 'hard_negative')
      AND "timestamp" < cutoff_date
    ON CONFLICT (symbol, timeframe, "timestamp") DO NOTHING;
    
    GET DIAGNOSTICS archived_count = ROW_COUNT;
    
    -- Delete archived patterns from live table
    DELETE FROM reversals
    WHERE outcome IN ('gold', 'hard_negative')
      AND "timestamp" < cutoff_date;
    
    RETURN archived_count;
END;
$$ LANGUAGE plpgsql;

-- Cleanup function for removing old data
CREATE OR REPLACE FUNCTION cleanup_old_reversals(retention_period INTERVAL DEFAULT '120 days')
RETURNS INTEGER AS $$
DECLARE
    deleted_count INTEGER := 0;
    cutoff_date TIMESTAMPTZ;
BEGIN
    cutoff_date := NOW() - retention_period;
    
    -- Delete old reversals (after archiving valuable ones)
    DELETE FROM reversals
    WHERE "timestamp" < cutoff_date;
    
    GET DIAGNOSTICS deleted_count = ROW_COUNT;
    
    -- Clean up old job runs (keep 30 days)
    DELETE FROM job_runs
    WHERE started_at < NOW() - INTERVAL '30 days';
    
    -- Clean up old system stats (keep 1 year)
    DELETE FROM system_stats
    WHERE stat_date < CURRENT_DATE - INTERVAL '1 year';
    
    RETURN deleted_count;
END;
$$ LANGUAGE plpgsql;

-- Function to update system statistics
CREATE OR REPLACE FUNCTION update_system_stats()
RETURNS VOID AS $$
BEGIN
    -- Delete today's stats to recalculate
    DELETE FROM system_stats WHERE stat_date = CURRENT_DATE;
    
    -- Insert fresh stats for each symbol/timeframe combination
    INSERT INTO system_stats (
        stat_date, symbol, timeframe,
        total_reversals, gold_count, hard_negative_count, neutral_count, pending_count,
        avg_quality_score, avg_gold_score, archive_total
    )
    SELECT 
        CURRENT_DATE,
        r.symbol,
        r.timeframe,
        COUNT(*) as total_reversals,
        COUNT(CASE WHEN r.outcome = 'gold' THEN 1 END) as gold_count,
        COUNT(CASE WHEN r.outcome = 'hard_negative' THEN 1 END) as hard_negative_count,
        COUNT(CASE WHEN r.outcome = 'neutral' THEN 1 END) as neutral_count,
        COUNT(CASE WHEN r.outcome = 'pending' THEN 1 END) as pending_count,
        AVG(CASE WHEN r.outcome <> 'pending' THEN r.quality_score END) as avg_quality_score,
        AVG(CASE WHEN r.outcome = 'gold' THEN r.quality_score END) as avg_gold_score,
        COALESCE(a.archive_count, 0) as archive_total
    FROM reversals r
    LEFT JOIN (
        SELECT symbol, timeframe, COUNT(*) as archive_count
        FROM reversals_archive
        GROUP BY symbol, timeframe
    ) a ON r.symbol = a.symbol AND r.timeframe = a.timeframe
    WHERE r."timestamp" > NOW() - INTERVAL '7 days'
    GROUP BY r.symbol, r.timeframe, a.archive_count;
END;
$$ LANGUAGE plpgsql;
